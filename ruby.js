// Generated by CoffeeScript 1.7.1
(function() {
  var LocalContextScope, LocalVariableBehavior, RuntimeState, ScriptingContainer, Semaphore, System, Thread, global, makeRequireScript, runtimeState, scriptingContainer,
    __slice = [].slice;

  System = java.lang.System;

  Thread = java.lang.Thread;

  Semaphore = java.util.concurrent.Semaphore;

  ScriptingContainer = Packages.org.jruby.embed.ScriptingContainer;

  LocalVariableBehavior = org.jruby.embed.LocalVariableBehavior;

  LocalContextScope = org.jruby.embed.LocalContextScope;

  global = this;

  scriptingContainer = new ScriptingContainer(LocalContextScope.CONCURRENT, LocalVariableBehavior.PERSISTENT);

  RuntimeState = {
    UNLOADED: 0,
    LOADING: 1,
    LOADED: 2,
    FAILED: 3
  };

  runtimeState = RuntimeState.UNLOADED;

  global.Ruby = function() {
    var ruby;
    ruby = function(code) {
      switch (runtimeState) {
        case RuntimeState.UNLOADED:
          throw 'Must call Ruby.preload([gems]) exactly once before executing ruby code';
          break;
        case RuntimeState.LOADING:
          while (runtimeState === RuntimeState.LOADING) {
            Thread.sleep(100);
          }
          return ruby(code);
        case RuntimeState.FAILED:
          throw 'Ruby runtime failed to load.';
          break;
        case RuntimeState.LOADED:
          return scriptingContainer.runScriptlet(code);
      }
    };
    ruby.setGemHome = function(gemHome) {
      return ruby("ENV['GEM_HOME'] = " + gemHome);
    };
    return ruby;
  };

  global.Ruby.preload = function() {
    var gems;
    gems = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (runtimeState !== RuntimeState.UNLOADED) {
      throw 'Ruby.preload([gems]) must be called exactly once';
    }
    runtimeState = RuntimeState.LOADING;
    return (new Thread(function() {
      var ex;
      try {
        scriptingContainer.runScriptlet(makeRequireScript.apply(null, gems));
        return runtimeState = RuntimeState.LOADED;
      } catch (_error) {
        ex = _error;
        runtimeState = RuntimeState.FAILED;
        throw ex;
      }
    })).start();
  };

  makeRequireScript = function() {
    var gems;
    gems = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (gems.length >= 1) {
      return gems.slice(1, +gems.length + 1 || 9e9).reduce((function(p, c) {
        return "" + p + "; require '" + c + "'";
      }), "require '" + gems[0] + "'");
    } else {
      return "nil";
    }
  };

}).call(this);
